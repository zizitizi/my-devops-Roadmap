## here is my play book code

- name: prepareation to install k8s on all server
  hosts: all
  become: true



  tasks:

#### change my system dns to desire dns to increase download speed  
       - name: replace dns lines all
         shell: echo "nameserver 10.202.10.202" > /etc/resolv.conf
       - name: change dns
         lineinfile:
             path: /etc/resolv.conf
             line: 'nameserver 10.202.10.102'
             state: present
       - name: reset adapter
         shell: netplan apply


#### swapp all off in all machines
       - name: uncomment line with swap word
         replace:
            path: /etc/fstab
            regexp: '^/swap'
            backup: yes
            replace: '#/swap'
       - name: verify swapoff
         shell: 'swapon -s'
         register: swap_out
       - debug: msg={{ swap_out }}
#### update catch and install cert for install containerd.io
       - name: install cert with update catch
         apt:
           name:
              - ca-certificates
              - curl
              - gnupg
           state: latest
           update_cache: yes
           force: yes
#### install keyring with permision to add docker repo to install containerd.io
       - name: install keyring
         file:
           path: /etc/apt/keyrings
           mode: 0755
           state: directory
       - name: gpg add
         shell: 'get_url -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg'
       - name: read permission for everyone for docker keyring gpg
         file:
            path: /etc/apt/keyrings/docker.gpg
            mode: 444
       - name: add docker repo
         shell: 'echo \
  "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
  "$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" | \
   tee /etc/apt/sources.list.d/docker.list > /dev/null'
#### install containerd with update cache
       - name: install containerd.io with update cache
         apt:
           name: containerd.io
           update_cache: yes
         ignore_errors: yes
       - name: verify containerd.io installation
         shell: 'containerd --version'
         register: containerd_out
       - debug:
            msg={{ containerd_out }}
       - name: config containerd
         shell: 'containerd config default > /etc/containerd/config.toml'

#### configure containerd.io
       - name: change systemCgroup to true
         replace:
           path: /etc/containerd/config.toml
           regexp: 'SystemdCgroup = false'
           backup: yes
           replace: 'SystemdCgroup = true'
       - name: verify SystemdCgroup = true
         shell: 'cat  /etc/containerd/config.toml | grep SystemdCgroup'
         register: systemgroup_out
       - debug:
            msg={{ systemgroup_out }}
       - name: daemon reload and restart containerd
         systemd:
           name: containerd
           state: restarted
           daemon_reload: yes
       - name: verify containerd service status
         shell: 'systemctl status containerd.service'
         register: containerdstatus_out
       - debug:
            msg={{ containerdstatus_out }}

#### configure modprobe
       - name: configure modprobe
         shell: 'modprobe br_netfilter;modprobe overlay'
       - name: verify modprobe
         shell: 'lsmod | grep br_netfilter;lsmod | grep overlay'
         register: modprob_out
       - debug:
            msg={{ modprob_out }}
            
#### configure sysctl

    - name: configure sysctl
      replace:
        path: /etc/sysctl.conf
        regexp: '#net.ipv4.ip_forward=1'
        backup: yes
        replace: '^net.ipv4.ip_forward=1'
    - name: reset sysctl
      shell: 'sysctl --system'
    - name: verify sysctl ipv4.ip_forward=1 config
      shell: 'sysctl -a | grep net.ipv4.ip_forward'
      register: sysctl_out
    - debug: msg={{ sysctl_out }}

#### update and install kube adm prequisite

    - name: update install app
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - conntrack
        update_cache: yes
        force: yes
        state: latest
      ignore_errors: yes


#### prepare k8s repo add key and repo
    - name: Add GPG key for k8s
      apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        state: present
    - name: add k8s repo list
      shell: 'echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | tee /etc/apt/sources.list.d/kubernetes.list'


#### install and update k8s
    - name: install kubeadm with update repo
      apt:
         name:
           - kubeadm
           - kubelet
           - kubectl
         force: yes
         update_cache: yes
         state: latest

#### mark hold installation
    - name: mark hold k8s installation
      shell: 'apt-mark hold kubelet kubeadm kubectl'
      register: mark_out
    - debug: msg={{ mark_out }}





- name: initiate kubeadm cluster on master server
  hosts: zizi
  become: true



  tasks:
     - name: init command
       shell: 'kubeadm init --pod-network-cidr=10.244.0.0/16'
       register: init_output
       file:
          content: {{ init_out }}
          path: /home/zizi/outinit.txt
          
             

