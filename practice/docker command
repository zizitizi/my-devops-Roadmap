# NGINX static css html website

  docker run -dit --name nginxyoga -v "/home/zizi/yogast-html/":/usr/share/nginx/html -v /var/log/nginx1:/var/log/nginx -p 8080:80 nginx

    see localhost:8080 or external serverip:8080

# ubuntu ssh container 

      docker run -dit --name ubuntussh -p 2022:22 ubuntu:22.04

       docker commit ubuntussh ubuntussh:v1.0

         

# docker senario with nginx busybox mysql host

docker network ls | awk 'NR <= 2; NR > 2 { print $0 | "sort -b -k 3,3 -k 1,1" };'

     docker network create --driver=bridge --subnet=172.16.0.0/16 test

     docker network create --driver=bridge --subnet=10.10.0.0/16 prod


docker run -dit --name mysqltestip --net=test --ip 172.16.1.10 --expose 3306 -p 3306:3306 mysql








docker run -dit --name ubdev2 --network=host --dns 4.2.2.4 ubuntu:22.04

sudo docker inspect -f '{{.State.Pid}}' ubdev2

50809

sudo mkdir -p /var/run/netns

ip netns list


Using the PID you have just obtained, create the symlink:


sudo ln -sf /proc/50809/ns/net /var/run/netns/dev


From now on, there is no docker specific stuffs, just create a veth pair, bring them up, and attach one end of it to the container and you are fine: 


sudo ip link add veth2_container type veth peer name veth2_root

sudo ifconfig veth2_container up

sudo ifconfig veth2_root up

sudo ip link set veth2_container netns dev

sudo ip netns exec dev ifconfig veth2_container up


docker exec -it ubdev2 bash

apt update ;apt install iproute2

ip a

u can see network dev


docker network ls | sort -k3

or

docker network ls | awk 'NR <= 2; NR > 2 { print $0 | "sort -b -k 3,3 -k 1,1" };'





















